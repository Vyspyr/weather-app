{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\my-website\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(null);\n  const [unit, setUnit] = useState(\"metric\"); // 'metric' for °C & km/h, 'imperial' for °F & mph\n  const canvasRef = useRef(null);\n\n  // Fetch weather data from your own backend\n  const fetchWeather = async () => {\n    if (!city) return;\n    try {\n      const response = await fetch(`http://localhost:5000/weather?city=${city}`);\n      const data = await response.json();\n      setWeather(data);\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      setWeather(null);\n    }\n  };\n\n  // Handle unit conversion\n  const getTemperature = () => {\n    if (!weather) return \"\";\n    return unit === \"metric\" ? `${weather.current.temp_c}°C` : `${weather.current.temp_f}°F`;\n  };\n  const getWindSpeed = () => {\n    if (!weather) return \"\";\n    return unit === \"metric\" ? `${weather.current.wind_kph} km/h` : `${weather.current.wind_mph} mph`;\n  };\n\n  // Background Animation (Starry Night)\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const animateBackground = () => {\n      ctx.fillStyle = \"rgba(15, 23, 42, 0.1)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    };\n    const animationFrame = setInterval(animateBackground, 1000 / 60);\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      clearInterval(animationFrame);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"backgroundCanvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"subtitle\",\n        children: \"Enter a city to check the weather.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter city name...\",\n          value: city,\n          onChange: e => setCity(e.target.value),\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchWeather,\n          className: \"search-button\",\n          children: \"Get Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unit-toggle\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"metric\",\n            checked: unit === \"metric\",\n            onChange: () => setUnit(\"metric\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), \"\\xB0C & km/h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"imperial\",\n            checked: unit === \"imperial\",\n            onChange: () => setUnit(\"imperial\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), \"\\xB0F & mph\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [weather.location.name, \", \", weather.location.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", getTemperature()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Condition: \", weather.current.condition.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Wind Speed: \", getWindSpeed()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: weather.current.condition.icon,\n          alt: \"Weather Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/95oE7KO0YOiF3pE49CGyYgNCeU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","city","setCity","weather","setWeather","unit","setUnit","canvasRef","fetchWeather","response","fetch","data","json","error","console","getTemperature","current","temp_c","temp_f","getWindSpeed","wind_kph","wind_mph","canvas","ctx","getContext","width","window","innerWidth","height","innerHeight","animateBackground","fillStyle","fillRect","animationFrame","setInterval","handleResize","addEventListener","clearInterval","removeEventListener","className","children","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","checked","location","name","country","condition","text","src","icon","alt","_c","$RefreshReg$"],"sources":["C:/React/my-website/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [weather, setWeather] = useState(null);\r\n  const [unit, setUnit] = useState(\"metric\"); // 'metric' for °C & km/h, 'imperial' for °F & mph\r\n  const canvasRef = useRef(null);\r\n\r\n  // Fetch weather data from your own backend\r\n  const fetchWeather = async () => {\r\n    if (!city) return;\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/weather?city=${city}`);\r\n      const data = await response.json();\r\n      setWeather(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather data:\", error);\r\n      setWeather(null);\r\n    }\r\n  };\r\n\r\n  // Handle unit conversion\r\n  const getTemperature = () => {\r\n    if (!weather) return \"\";\r\n    return unit === \"metric\"\r\n      ? `${weather.current.temp_c}°C`\r\n      : `${weather.current.temp_f}°F`;\r\n  };\r\n\r\n  const getWindSpeed = () => {\r\n    if (!weather) return \"\";\r\n    return unit === \"metric\"\r\n      ? `${weather.current.wind_kph} km/h`\r\n      : `${weather.current.wind_mph} mph`;\r\n  };\r\n\r\n  // Background Animation (Starry Night)\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n\r\n    const animateBackground = () => {\r\n      ctx.fillStyle = \"rgba(15, 23, 42, 0.1)\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n\r\n    const animationFrame = setInterval(animateBackground, 1000 / 60);\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      clearInterval(animationFrame);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <canvas ref={canvasRef} id=\"backgroundCanvas\"></canvas>\r\n      <div className=\"content\">\r\n        <h1 className=\"title\">Weather App</h1>\r\n        <p className=\"subtitle\">Enter a city to check the weather.</p>\r\n\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter city name...\"\r\n            value={city}\r\n            onChange={(e) => setCity(e.target.value)}\r\n            className=\"input-field\"\r\n          />\r\n          <button onClick={fetchWeather} className=\"search-button\">\r\n            Get Weather\r\n          </button>\r\n        </div>\r\n\r\n        {/* Unit Selection */}\r\n        <div className=\"unit-toggle\">\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"metric\"\r\n              checked={unit === \"metric\"}\r\n              onChange={() => setUnit(\"metric\")}\r\n            />\r\n            °C & km/h\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              value=\"imperial\"\r\n              checked={unit === \"imperial\"}\r\n              onChange={() => setUnit(\"imperial\")}\r\n            />\r\n            °F & mph\r\n          </label>\r\n        </div>\r\n\r\n        {/* Display Weather Data */}\r\n        {weather && (\r\n          <div className=\"weather-card\">\r\n            <h2>{weather.location.name}, {weather.location.country}</h2>\r\n            <p>Temperature: {getTemperature()}</p>\r\n            <p>Condition: {weather.current.condition.text}</p>\r\n            <p>Wind Speed: {getWindSpeed()}</p>\r\n            <img src={weather.current.condition.icon} alt=\"Weather Icon\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}